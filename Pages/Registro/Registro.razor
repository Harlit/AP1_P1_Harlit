@page "/aporte"
@page "/aporte/{AporteId:int}"

@inject AportesBLL AportesBLL
@inject NotificationService notificationService

<EditForm Model="aporte" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>aporte de aporte</h3>
        </div>
        <div class="card-body">
            <div class="container overflow-hidden">
                <div class="row gy-6">

                    @*AporteId*@
                     <label>aporte ID</label>
                    <div class="form-r ow align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <div class="input-group">
                                    <InputNumber @bind-Value="aporte.AporteId" class="form-control" />
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-primary" type="button" @onclick="Buscar"> <i class="oi oi-magnifying-glass" /> </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div> 



                     @*Fecha*@
             <div class="form-group">
                <label>Fecha</label>
                <InputDate @bind-Value="aporte.Fecha" class="form-control" />
                <ValidationMessage For="@(() => aporte.Fecha)" />
            </div>

                  @*Persona*@
             <div class="form-group">
                <label>Persona</label>
                <InputText @bind-Value="aporte.Persona" class="form-control" />
                <ValidationMessage For="@(() => aporte.Persona)" />
            </div>

             @*Observacion*@
             <div class="form-group">
                <label>Observacion</label>
                <InputText @bind-Value="aporte.Observacion" class="form-control" />
                <ValidationMessage For="@(() => aporte.Observacion)" />
            </div>

                  @*Monto*@
             <div class="form-group">
                <label>Monto</label>
                <InputNumber @bind-Value="aporte.Monto" class="form-control" />
                <ValidationMessage For="@(() => aporte.Monto)" />
            </div>

               <div class="card-footer d-flex justify-content-center">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo</button>
                <button type="submit" class="btn btn-success"> <i class="oi oi-document" /> Guardar</button>
                <button type="button" class="btn btn-danger"><i class="oi oi-trash" /> Eliminar</button>
            </div>
        </div>
        </div>

        </div>

        </div> 

     </div>
</EditForm> 








@code
 {

    [Parameter]
    public int AporteId { get; set; }
    public Aportes aporte { get; set; } = new Aportes();
    public String mensaje { get; set; } = "";

    protected override void OnInitialized()
    {
        if (AporteId > 0)
        {
            
            this.aporte.AporteId = AporteId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        mensaje = "";
        aporte = new Aportes();
    }

     bool Validar()
    {
        return aporte.Persona.Contains(".");
    } 

    public void Guardar()
    {

        bool guardo = AportesBLL.Guardar(aporte);

        if (guardo)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });

            Nuevo();
        }
    }
    private void Buscar()
    {
        if (aporte.AporteId > 0)
        {
            var encontrado = AportesBLL.Buscar(aporte.AporteId);

            if (encontrado != null)
                this.aporte = encontrado;
        }
    }

    public void Eliminar()
    {
        bool elimino;

        elimino = AportesBLL.Eliminar(aporte);

        if (elimino)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Elimanado correctamente"
            });
            Nuevo();

        }
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);

    }
} 